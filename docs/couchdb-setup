This document covers setting up CouchDB as a backend for SGAS.

Note: CouchDB 0.9 or later is required. 0.8 will NOT work. 0.10 is highly
      recommended. 0.11 is also good, but has a performance regression for
      view generation.


1. Installation

Ubuntu 9.10 (Karmic) includes CouchDB 0.10. Package name: couchdb (universe)

For earlier Ubuntu versions it is possible to install CouchDB 0.9+ manually,
but using the PPA from James Henstridge is much easier. See:
https://launchpad.net/~jamesh/+archive/ppa

RedHat / CentOS

Package name: couchdb


2. Setup database

Note, CouchDB has no limit on access/authorization, but by default only listens
on the lo interface, meaning that it can only be reached from the machine
itself. Hence SGAS should be running on the same machine. It is possible to
have CouchDB listen on external interface, check the documentation, and
remember to set your iptables).

Open the CouchDB administrative interface (called Futon). This is done by
pointing a browser at localhost:5984 at CouchDB machine. If you don't have a
browser (or X tunneling) at the machine, you can use ssh port forwarding:

$ ssh -L 6984:localhost:5984 couchdb.example.org

And then point your browser to http://localhost:6984/_utils/

Once you have access to Futon, create a database. Name doesn't matter, but
"usagerecords" tends to work fine. The url for accessing the database (to be
used in the sgas configuration) will then be:

http://localhost:5984/usagerecords


3. Optimizations

Optimize view generation performance by setting the following lines in
the [couchdb] section in the /etc/couchdb/local.ini file:

batch_save_size = 20000     ; number of docs at which to commit a batch
batch_save_interval = 20000 ; msecs after which to commit a batch


4. Views

Inspecting individual usage records is typically rather useless. In order to
provide high level information about the usage record data, you should
configure a set of views.

The easiest way it to use Futon to create an SGAS coreinfo view (found in
docs/couchdb-views). This will generate high-level data suitable for
inspection. Typically it is necessary to fetch the generated view data
and do some postprocessing on it manually.

