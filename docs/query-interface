
As of version 3.4 SGAS LUTS features a view engine, which can be used to access
the stored accounting data. Currently it is only possible to get aggregated
data in rather specific, but quite generic format. This document describes the
query interface in details.

* Activating Query interface

Enable the query interface see docs/plugins for more information.

* Authorizing Query Access

Before dispatching any queries, the user/host performing the query, must be
allowed access. This is done in the sgas.authz file, the user/host performing
the query, must be allowed access. This is done in the sgas.authz file. To
allow a party to query everything the "query:all" stanza is used, e.g.:

"/O=Grid/O=NorduGrid/OU=ndgf.org/CN=Henrik Thostrup Jensen"     query:all

However this is usually not desirable, instead we only want to allow a party to
query for a certain set of machines or user identities. Or perhaps a
combination of it. The follow presents a range of examples showing different
options for authorization.

# Allow query for information regarding host1.example.org machine.
"Certificate DN"    query:machine_name=host1.example.org

# Allow query for information regarding machines host1.example.org and host2.example.org
"Certificate DN"    query:machine_name=host1.example.org;host2.example.org

# Allow query for information regarding VO ops
"Certificate DN"    query:vo_name=ops

# Allow query information on host1.example.org and all information regarding user1
"Certificate DN"    query:machine_name=host1.example.org,query:user_identity=user1

# Allow query for information for user1 on host1.example.org
"Certificate DN"    query:machine_name=host1.example.org+user_identity=user1

Note the difference on the last to examples.



* Locating the query interface.

Before executing the query, the query endpoint of the SGAS instance must be
located. This is done by asking SGAS for a list of services. This is done by
performing an HTTPS GET operation on the base SGAS URL. A base SGAS URL will
typically look like this: "https://sgas.example.org:6143/sgas". Note that a
client certificate must be presented to access the service list (though no
other authorization is done for the list retrieval). The result of the GET
operation will be an XML document looking like this:

<?xml version="1.0" encoding="UTF-8"?>
<services>
    <service><name>Query</name><href>https://sgas.example.org:6143/sgas/query</href></service>
    <service><name>View</name><href>https://sgas.example.org:6143/sgas/view</href></service>
    <service><name>Registration</name><href>https://sgas.example.org:6143/sgas/ur</href></service>
</services>

From this document, extract the URL for the "Query" service, and you have the
query endpoint URL. You can also use the query URL directly, as is practically
never changed.


* Querying the interface

Similarly to the retrieving the service list, the query itself is also with an
HTTPS GET operation. To specify the query parameters, a URL with the query
elements must be created. It is possible to query for the following elements:

 - machine_name
 - user_identity
 - vo_name

Using these parameters will limit the query to certain machines, user identities,
or VOs. Furthermore it is possible to specify start time, end time, and time
resolution for the query using the following elements:

 - start_date
 - end_date
 - time_resolution

Start and end date must be specified in YYYY-MM-DD format, .e.g., 2010-10-15.
Start date is inclusive (>=) and end date is exclusive (<).
Time resolution value must be one of "collapse", "month", or "day". If not
specified "collapse" is used.

To construct the URL for the query, use the above parameters and specify the
needed ones as HTTP query parameters, E.g., to query for a certain machine, the
URL would look like this:

https://sgas.example.org:6143/sgas/query?machine_name=host1.example.org

To query for a certain user like this:

https://sgas.example.org:6143/sgas/query?user_identity=user1

To query for a certain user on a certain machine:

https://sgas.example.org:6143/sgas/query?machine_name=host1.example.org&user_identity=user1

To query for VO usage on a certain machine:

https://sgas.example.org:6143/sgas/query?machine_name=host1.example.org&vo_name=vo1

To query for user in a certain time period

https://sgas.example.org:6143/sgas/query?user_identity=user1&start_date=2010-01-01&end_date=2010-06-30

It is possible to specify multiple machines or users in a single query by comma
separating them.

Remember to URL encode the query parameters. This will turn special symbols such
as space into the "correct" value for being transmitted in a URL. Most URL
libraries have functionality for this.


* Interpreting the result

The result from a successful query request is a JSON encoded document. The
document is a list of dictionaries, with each dictionary representing a chunk
of aggregated usage data. The granularity is per machine, user and vo. It might
be possible to collapse these in the future.

Pretty much all languages have one or more JSON libraries for decoding the data
into data structures.

A response payload could look like this (formatted):

[
 { "cpu_time": 0.2,
   "machine_name": "benedict.grid.aau.dk",
   "end_date": "2010-10-15",
   "user_identity": "benedict.grid.aau.dk:user1",
   "wall_time": 0.35,
   "n_jobs": 70,
   "start_date": "2000-01-01"
 },
 { "cpu_time": 0.0,
   "machine_name": "benedict.grid.aau.dk",
   "end_date": "2010-10-15",
   "user_identity": "/O=Grid/O=NorduGrid/OU=ndgf.org/CN=Test User",
   "wall_time": 0.02,
   "n_jobs": 1,
   "start_date": "2000-01-01"}
]

I.e., a list of records with usage data. The fields are:

machine_name    : The name of the machine
user_identity   : The name of the user
vo_name         : The vo/project name
start_date      : Date for when the record is valid
end_date        : Date for when the record is no longer valid
n_jobs          : Number of jobs executed
cpu_time        : Aggregated CPU time (in hours)
wall_time       : Aggreaged Wall time (adjusted for multi-core jobs) (in hours)

The records cannot be assumed to be in any order, just extract the data
you need by field name. If you need some special aggregations you may have to
perform some aggregation yourself.



If you have questions or suggestion for improvement wrt. this document, please
email me at htj _at_ ndgf.org

