View Examples
-----------------------------------------------------------

# aggreated walltime per host / day


function(doc) {
    emit([doc.machine_name, doc.start_time.substring(0,10)], doc.wall_duration);
}

function (key, values) {
    return sum(values);
}


# aggregated wall time per global user / day

function(doc) {
    emit([doc.global_user_name, doc.start_time.substring(0,10)], doc.wall_duration);
}

function (key, values) {
    return sum(values);
}


# number of inserted records per host / day

function(doc) {
    emit([doc.insert_time.substring(0,10), doc.machine_name], 1);
}

function (key, values) {
    return sum(values);
}


# apel/wlcg reporting view (to get a complex example)

function(doc) {
  var vo = null;
  var vo_issuer = null;
  var vo_group = null;
  var vo_role = null;

  if (doc.vo_name)   { vo = doc.vo_name; }
  if (doc.vo_issuer) { vo_issuer = doc.vo_issuer; }
  if (doc.vo_attrs)  {
    vo_group = doc.vo_attrs[0].group;
    if (doc.vo_attrs[0].role) {
      vo_role = doc.vo_attrs[0].role;
    }
  }

  if (doc.end_time) {
    year  = doc.end_time.substring(0,4);
    month = doc.end_time.substring(5,7);
  }
  else {
    year  = doc.create_time.substring(0,4);
    month = doc.create_time.substring(5,7);
  }

  key = [year, month, doc.machine_name, doc.global_user_name,
         vo, vo_issuer, vo_group, vo_role];

  var ksi2k_cpu_duration = null;
  var ksi2k_wall_duration = null;
  if (doc.ksi2k_cpu_duration) {
    ksi2k_cpu_duration = doc.ksi2k_cpu_duration;
  }
  if (doc.ksi2k_wall_duration) {
    ksi2k_wall_duration = doc.ksi2k_wall_duration;
  }

  value = [1, doc.cpu_duration, ksi2k_cpu_duration, doc.wall_duration, ksi2k_wall_duration];

  emit(key, value);
}

function(keys, values) {
  var e = 5;
  var newvals = new Array(e);
  for (var n=0; n < e; n++) {
    newvals[n] = 0;
  }

  for (var i=0; i < values.length; i++) {
    for (var j=0; j < e; j++) {
      if (newvals[j] == null || values[i][j] == null) {
        newvals[j] = null;
      }
      else {
        newvals[j] += values[i][j];
      }
    }
  }

  return newvals;
}


