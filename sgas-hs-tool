#!/usr/bin/python

"""
A tool for managing hostscalingfactors in the SGAS db.

Author: Erik Edelmann <edelmann@csc.fi>
Copyright NeIC 2016
"""

import argparse
import psycopg2
import datetime
import sys

from sgas.server import config


DEFAULT_POSTGRESQL_PORT = 5432
NOW = datetime.datetime.now()


def connectDb(dbstring):
    args = [ e or None for e in dbstring.split(':') ]
    host, port, database, user, password = args[:5]

    if port is None:
        port = DEFAULT_POSTGRESQL_PORT

    try:
        return psycopg2.connect(host=host, port=port, database=database, user=user, password=password)
    except psycopg2.Error as e:
        print "DB Error: %s" % e
    sys.exit(1)


def show_factors(db, machine_name, time):
    query = "SELECT DISTINCT ON (machine_name) machine_name, scale_factor, from_time FROM hostscalefactors WHERE %s from_time <= '%s' ORDER BY machine_name, from_time DESC;"

    if machine_name:
        machine_requirement = "machine_name = '%s' AND" % machine_name
    else:
        machine_requirement = ""

    if not time:
        time = NOW.isoformat()

    try:
        cur = db.cursor()
        cur.execute(query % (machine_requirement, time))
    except psycopg2.Error as e:
        print "DB Error: %s" % e
        sys.exit(1)

    for row in cur.fetchall():
        machine_name = row[0]
        scalefactor = row[1]
        time = row[2]
        print "%-40s  %7s    %s" % (machine_name, scalefactor, time)



def main():
    argparser = argparse.ArgumentParser(description='Manage hostscaling factors in SGAS')
    argparser.add_argument('action', choices=['set', 'show', 'del'], help='Action')
    argparser.add_argument('machine_name', nargs='?', help="Machine name")
    argparser.add_argument('-t', '--time', help="Time in format YYYY-MM-DD[ hh:mm:ss]")
    argparser.add_argument('-c', '--conf', help="SGAS config file (default: /etc/sgas.conf)", default="/etc/sgas.conf")

    args = argparser.parse_args()

    cfg = config.readConfig(args.conf)
    db = connectDb(cfg.get(config.SERVER_BLOCK,config.DB))

    if args.action == 'show':
        show_factors(db, args.machine_name, args.time)
    elif args.action == 'set':
        set_factor(db, args.machine_name, args.time)
    elif args.action == 'del':
        del_factor(db, args.machine_name, args.time)
    else:
        raise Exception("Huh?  We should never end up here!")


if __name__ == "__main__":
    main()
